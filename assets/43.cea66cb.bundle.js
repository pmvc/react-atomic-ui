"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[43],{392(e,c,a){a.r(c),a.d(c,{default:()=>q});for(var f,g,h=a(2),i=a(16),j=a(36),k=a(1),l=a(146),m=a(3),n=a(37),o=a(0),d={tables:[],conns:[{from:{table:"table1",col:"t1-col1"},to:{table:"table2",col:"t2-col2"}}]},b=1;b<999;b++)d.tables.push({name:"table"+b,cols:["t"+b+"-col1","t"+b+"-col2"]});let p=function(){var c,e,g=(0,k.useRef)(),a=(0,k.useState)(!1),b=a[0],h=a[1];return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(l.O5,{style:{height:"50vh"},onZoom:function(a){},ref:function(a){return g.current=a},data:d,lineDefaultProps:{curve:!b},connsLocator:function(a){return a.conns},connFromBoxGroupLocator:function(a){return a.from.table},connFromBoxLocator:function(a){return a.from.col},connToBoxGroupLocator:function(a){return a.to.table},connToBoxLocator:function(a){return a.to.col},onBoxWillDrag:function(a){return!e.getChecked().input},onLineDel:function(a){return console.log({e:a}),!c.getChecked().input}}),(0,o.jsxs)(m.l0,{style:{boxSizing:"border-box"},className:"equal width",children:[f||(f=(0,o.jsxs)(m.gN,{children:[(0,o.jsx)(m.gN,{atom:"input",label:"x",name:"x"}),(0,o.jsx)(m.gN,{atom:"input",label:"y",name:"y"}),(0,o.jsx)(m.gN,{atom:"input",label:"k",name:"k"})]})),(0,o.jsxs)(m.gN,{children:[(0,o.jsx)(n.XZ,{toggle:!0,label:"disable curve",onChange:function(a){h(a.checked)}}),(0,o.jsx)(n.XZ,{label:"disable line delete",ref:function(a){return c=a}}),(0,o.jsx)(n.XZ,{label:"disable node move",ref:function(a){return e=a}})]}),(0,o.jsx)(m.zx,{onClick:function(b){var a=(b.currentTarget||{}).form;g.current.zoom.setXYK({x:a.x.value||null,y:a.y.value||null,k:a.k.value||null})},children:"update"})]})]})},q=function(a){return(0,j.Z)((0,h.Z)((0,h.Z)({},a),{},{pageName:"D3UmlPerf"})),(0,o.jsx)(o.Fragment,{children:g||(g=(0,o.jsx)(i.Z,{code:'import React, { useRef, useState } from "react";\n\nimport { UMLGraph } from "organism-react-d3-uml";\nimport { Form, Field, Button } from "react-atomic-molecule";\nimport { Checkbox } from "react-atomic-organism";\n\nconst data = {\n  tables: [],\n  conns: [\n    {\n      from: {\n        table: "table1",\n        col: "t1-col1",\n      },\n      to: {\n        table: "table2",\n        col: "t2-col2",\n      },\n    },\n  ],\n};\n\nfor (let i = 1; i < 999; i++) {\n  data.tables.push({\n    name: `table${i}`,\n    cols: [`t${i}-col1`, `t${i}-col2`],\n  });\n}\n\nconst D3UmlPerfExample = () => {\n  const uml = useRef();\n  const [isDisableCurve, setIsDisableCurve] = useState(false);\n  const handleUml = (el) => (uml.current = el);\n  const handleUpdate = (e) => {\n    const t = e.currentTarget || {};\n    const fm = t.form;\n    uml.current.zoom.setXYK({\n      x: fm.x.value || null,\n      y: fm.y.value || null,\n      k: fm.k.value || null,\n    });\n  };\n  const handleZoom = (e) => {\n    //  console.log(e.zoom.getXYK());\n  };\n  let isDisableDel;\n  let isDisableMove;\n  return (\n    <>\n      <UMLGraph\n        style={{ height: "50vh" }}\n        onZoom={handleZoom}\n        ref={handleUml}\n        data={data}\n        lineDefaultProps={{ curve: !isDisableCurve }}\n        connsLocator={(d) => d.conns}\n        connFromBoxGroupLocator={(d) => d.from.table}\n        connFromBoxLocator={(d) => d.from.col}\n        connToBoxGroupLocator={(d) => d.to.table}\n        connToBoxLocator={(d) => d.to.col}\n        onBoxWillDrag={(e) => {\n          return !isDisableMove.getChecked().input;\n        }}\n        onLineDel={(e) => {\n          console.log({ e });\n          return !isDisableDel.getChecked().input;\n        }}\n      />\n      <Form style={{ boxSizing: "border-box" }} className="equal width">\n        <Field>\n          <Field atom="input" label="x" name="x" />\n          <Field atom="input" label="y" name="y" />\n          <Field atom="input" label="k" name="k" />\n        </Field>\n        <Field>\n          <Checkbox\n            toggle\n            label="disable curve"\n            onChange={({ checked }) => {\n              setIsDisableCurve(checked);\n            }}\n          />\n          <Checkbox\n            label="disable line delete"\n            ref={(el) => (isDisableDel = el)}\n          />\n          <Checkbox\n            label="disable node move"\n            ref={(el) => (isDisableMove = el)}\n          />\n        </Field>\n        <Button onClick={handleUpdate}>update</Button>\n      </Form>\n    </>\n  );\n};\n\nexport default D3UmlPerfExample;\n',header:"D3 Uml",id:"d3-uml",children:(0,o.jsx)(p,{})}))})}}}])