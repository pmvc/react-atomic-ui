{"version":3,"file":"main.a59241204d1bf9f41e1e.hot-update.js","sources":["webpack:///../react-atomic-organism/packages/organism-react-popup/build/es/src/stores/popupStore.js"],"sourcesContent":["'use strict';\n\nimport _typeof from \"reshow-runtime/es/helpers/typeof\";\nimport _classCallCheck from \"reshow-runtime/es/helpers/classCallCheck\";\nimport _createClass from \"reshow-runtime/es/helpers/createClass\";\nimport _possibleConstructorReturn from \"reshow-runtime/es/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"reshow-runtime/es/helpers/getPrototypeOf\";\nimport _inherits from \"reshow-runtime/es/helpers/inherits\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { Map } from 'immutable';\nimport { ReduceStore } from 'reshow-flux';\nimport get from 'get-object-value';\nimport set from 'set-object-value';\nimport dispatcher from '../popupDispatcher';\nvar groups = {};\nvar SHOW_KEY = 'shows';\nvar NODE_KEY = 'nodes';\nvar keys = Object.keys;\nvar isArray = Array.isArray;\n\nvar PopupStore = /*#__PURE__*/function (_ReduceStore) {\n  _inherits(PopupStore, _ReduceStore);\n\n  var _super = _createSuper(PopupStore);\n\n  function PopupStore() {\n    _classCallCheck(this, PopupStore);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PopupStore, [{\n    key: \"getInitialState\",\n    value: function getInitialState() {\n      return Map({\n        shows: Map(),\n        nodes: Map()\n      });\n    }\n  }, {\n    key: \"updateDom\",\n    value: function updateDom(state, action) {\n      var popupNode = get(action, ['params', 'popup']);\n      var key = get(popupNode, ['props', 'name'], 'default');\n\n      if (key !== get(popupNode, ['props', 'name'])) {\n        console.warn({\n          Warn: 'Popup Key not consistence, you use a default key. you should assign name to each specific popup element.',\n          PopUpKey: get(popupNode, ['props', 'name']),\n          ActualKey: key\n        });\n      }\n\n      var shows = state.get(SHOW_KEY).set(key, true);\n      var nodes = state.get(NODE_KEY).set(key, popupNode);\n      var nodeGroups = get(popupNode, ['props', 'group']);\n\n      if (nodeGroups) {\n        if (!isArray(nodeGroups)) {\n          nodeGroups = [nodeGroups];\n        }\n\n        nodeGroups.forEach(function (nodegroup) {\n          return set(groups, [nodegroup, key], true);\n        });\n      }\n\n      return state.set(SHOW_KEY, shows).set(NODE_KEY, nodes);\n    }\n  }, {\n    key: \"getKey\",\n    value: function getKey(action) {\n      var popup = get(action, ['params', 'popup'], 'default');\n      var key;\n\n      if ('object' === _typeof(popup)) {\n        key = get(popup, ['props', 'name'], popup);\n      } else {\n        key = popup;\n      }\n\n      return key;\n    }\n  }, {\n    key: \"closeAll\",\n    value: function closeAll(state, action) {\n      return state.set(SHOW_KEY, Map());\n    }\n  }, {\n    key: \"closeOne\",\n    value: function closeOne(state, action) {\n      var key = this.getKey(action);\n      var shows = state.get(SHOW_KEY)[\"delete\"](key);\n      return state.set(SHOW_KEY, shows);\n    }\n  }, {\n    key: \"closeGroup\",\n    value: function closeGroup(state, action) {\n      var groupKey = get(action, ['params', 'group']);\n      var group = get(groups, [groupKey]);\n      var shows = state.get(SHOW_KEY);\n\n      if (group) {\n        keys(group).forEach(function (key) {\n          shows = shows[\"delete\"](key);\n        });\n      }\n\n      return state.set(SHOW_KEY, shows);\n    }\n  }, {\n    key: \"cleanAll\",\n    value: function cleanAll(state, action) {\n      return state.set(SHOW_KEY, Map()).set(NODE_KEY, Map());\n    }\n  }, {\n    key: \"cleanOne\",\n    value: function cleanOne(state, action) {\n      var key = this.getKey(action);\n      var nodes = state.get(NODE_KEY)[\"delete\"](key);\n      var shows = state.get(SHOW_KEY)[\"delete\"](key);\n      return state.set(NODE_KEY, nodes).set(SHOW_KEY, shows);\n    }\n  }, {\n    key: \"cleanGroup\",\n    value: function cleanGroup(state, action) {\n      var groupKey = get(action, ['params', 'group']);\n      var group = get(groups, [groupKey]);\n\n      if (group) {\n        var nodes = state.get(NODE_KEY);\n        var shows = state.get(SHOW_KEY);\n        keys(group).forEach(function (key) {\n          nodes = nodes[\"delete\"](key);\n          shows = shows[\"delete\"](key);\n        });\n        return state.set(NODE_KEY, nodes).set(SHOW_KEY, shows);\n      } else {\n        return state;\n      }\n    }\n  }, {\n    key: \"reduce\",\n    value: function reduce(state, action) {\n      switch (action.type) {\n        case 'dom/update':\n          return this.updateDom(state, action);\n\n        case 'dom/closeAll':\n          return this.closeAll(state, action);\n\n        case 'dom/cleanAll':\n          return this.cleanAll(state, action);\n\n        case 'dom/closeOne':\n          return this.closeOne(state, action);\n\n        case 'dom/cleanOne':\n          return this.cleanOne(state, action);\n\n        case 'dom/closeGroup':\n          return this.closeGroup(state, action);\n\n        case 'dom/cleanGroup':\n          return this.cleanGroup(state, action);\n\n        case 'config/set':\n          return state.merge(action.params);\n\n        default:\n          return state;\n      }\n    }\n  }]);\n\n  return PopupStore;\n}(ReduceStore); // Export a singleton instance of the store, could do this some other way if\n// you want to avoid singletons.\n\n\nvar instance = new PopupStore(dispatcher);\nexport default instance;"],"mappingssourceRoot":""}